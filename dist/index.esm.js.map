{"version":3,"file":"index.esm.js","sources":["../src/core/waitForCopilot.ts","../src/core/CopilotInstanceManager.ts","../src/utills/validateBotName.ts","../src/types/CopilotTypes.ts","../src/components/CopilotProvider.tsx","../src/components/Copilot.tsx","../src/core/hooks/useCopilot.ts","../src/core/hooks/useCopilotTools.ts","../src/core/hooks/useCopilotUser.ts"],"sourcesContent":["import type { CopilotAPI } from '../types/CopilotTypes';\n\nexport const waitForCopilot = (\n  botName: string,\n  timeout = 5000,\n  interval = 100\n): Promise<CopilotAPI | null> => {\n  return new Promise((resolve) => {\n    if (typeof window === 'undefined') return resolve(null);\n\n    let tries = 0;\n    const maxTries = Math.ceil(timeout / interval);\n\n    const check = () => {\n      const copilotFn = (window as any)[botName];\n      const isReady = (window as any)[`_${botName}_ready`];\n\n      const hasRealAPI =\n        typeof copilotFn === 'function' &&\n        typeof copilotFn.tools?.add === 'function' &&\n        typeof copilotFn.users?.set === 'function';\n\n      if (isReady && hasRealAPI) {\n        const copilotAPI: CopilotAPI = {\n          show: () => copilotFn('event', 'open'),\n          hide: () => copilotFn('event', 'close'),\n          tools: {\n            add: (tools) => copilotFn.tools.add(tools),\n            remove: (name) => copilotFn.tools.remove?.(name),\n            removeAll: () => copilotFn.tools.removeAll?.(),\n          },\n          users: {\n            set: (user) => copilotFn.users.set(user),\n            unset: () => copilotFn.users.unset(),\n          },\n        };\n\n        return resolve(copilotAPI);\n      }\n\n      if (++tries >= maxTries) {\n        console.warn(`[${botName}] Copilot not ready after timeout.`);\n        return resolve(null);\n      }\n\n      setTimeout(check, interval);\n    };\n\n    check();\n  });\n};","import type { CopilotAPI } from '../types/CopilotTypes';\n\nexport const copilotInstances = new Map<string, CopilotAPI>();","export const validateBotName = (botName: string): string => {\n    const isValid = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(botName);\n    if (!isValid) {\n      throw new Error(\n        `[CopilotProvider] Invalid botName \"${botName}\". It must start with a letter, $, or _, and contain only letters, numbers, $, or _.`\n      );\n    }\n    return botName;\n  };","   export const defaultBotName = 'copilot'; \n   export type ToolParameter = {\n    type: string;\n    description?: string;\n  };\n  \n  export type ToolDefinition = {\n    name: string;\n    description: string;\n    parameters?: {\n      type: 'object';\n      properties: Record<string, ToolParameter>;\n      required?: string[];\n    };\n    timeout?: number;\n    handler: (args: Record<string, any>) => Promise<any> | any;\n  };\n  \n  export type CopilotAPI = {\n    show: () => void;\n    hide: () => void;\n    tools: {\n      add: (tool: ToolDefinition | ToolDefinition[]) => void;\n      remove: (name: string) => void;\n      removeAll?: () => void;\n    };\n    users: {\n      set: (user: Record<string, any>) => void;\n      unset: () => void;\n    };\n  };","// Updated CopilotProvider with automatic mode detection\nimport React, { useEffect } from 'react';\nimport { waitForCopilot } from '../core/waitForCopilot';\nimport { copilotInstances } from '../core/CopilotInstanceManager';\nimport { validateBotName } from '../utills/validateBotName';\nimport { defaultBotName, type CopilotAPI } from '../types/CopilotTypes';\n\nexport const registeredCopilotNames: string[] = [];\n\ninterface SharedProps {\n  children: React.ReactNode;\n}\n\ninterface SingleInstance {\n  token: string;\n  config?: Record<string, any>;\n  scriptUrl?: string;\n  botName?: string;\n}\n\ninterface MultiInstance {\n  instances: SingleInstance[];\n}\n\ntype CopilotProviderProps = (SingleInstance | MultiInstance) & SharedProps;\n\nconst injectCopilotScript = (\n  key: string,\n  token: string,\n  config: Record<string, any> = {},\n  scriptUrl?: string,\n  botName: string = 'copilot'\n) => {\n  const safeBotName = validateBotName(botName);\n  const scriptId = `copilot-loader-script${safeBotName === 'copilot' ? '' : `-${safeBotName}`}`;\n  if (document.getElementById(scriptId)) return;\n\n  const inlineScript = document.createElement('script');\n  inlineScript.id = scriptId;\n  inlineScript.type = 'application/javascript';\n  inlineScript.innerHTML = `\n    (function(w,d,s,o,f,js,fjs){\n      w[o]=w[o]||function(){\n        (w[o].q=w[o].q||[]).push(arguments);\n      };\n      js=d.createElement(s), fjs=d.getElementsByTagName(s)[0];\n      js.id=o;\n      js.src=\"${scriptUrl ?? 'https://script.copilot.live/v1/copilot.min.js'}?tkn=${token}\";\n      js.async=1;\n      js.referrerPolicy=\"origin\";\n      fjs.parentNode.insertBefore(js,fjs);\n    })(window,document,\"script\",\"${safeBotName}\");\n\n    ${safeBotName}(\"init\", ${JSON.stringify(config)}, function () {\n      window[\"_${safeBotName}_ready\"] = true;\n    });\n  `;\n\n  document.body.appendChild(inlineScript);\n\n  waitForCopilot(safeBotName).then((copilot: CopilotAPI | null) => {\n    if (copilot) {\n      copilotInstances.set(key, copilot);\n      registeredCopilotNames.push(key);\n      console.log(`[CopilotProvider] Registered: ${key}`);\n    }\n  });\n};\n\nexport const CopilotProvider = (props: CopilotProviderProps) => {\n  useEffect(() => {\n    // MULTI mode\n    if ('instances' in props && Array.isArray(props.instances)) {\n      props.instances.forEach(({ token, config = {}, scriptUrl, botName }, index) => {\n        const instanceKey = botName || `${defaultBotName}${index + 1}`;\n        injectCopilotScript(instanceKey, token, config, scriptUrl, botName);\n      });\n    }\n    // SINGLE mode\n    else if ('token' in props) {\n      const { token, config = {}, scriptUrl, botName } = props;\n      injectCopilotScript(botName || defaultBotName, token, config, scriptUrl, botName);\n    }\n  }, [props]);\n\n  return <>{props.children}</>;\n};","import React, { useEffect } from 'react';\nimport { copilotInstances } from '../core/CopilotInstanceManager';\nimport { defaultBotName, type ToolDefinition } from '../types/CopilotTypes';\n\ntype Props = {\n  tools?: ToolDefinition | ToolDefinition[];\n  botName?: string;\n};\n\nexport const Copilot = ({ tools, botName = defaultBotName }: Props) => {\n  useEffect(() => {\n    const copilot = copilotInstances.get(botName);\n    if (!copilot || !tools) return;\n\n    if (typeof copilot.tools?.add === 'function') {\n      copilot.tools.add(tools);\n      const count = Array.isArray(tools) ? tools.length : 1;\n      console.log(`[Copilot:${botName}] Registered ${count} tool(s)`);\n    } else {\n      console.warn(`[Copilot:${botName}] tools.add() not available yet`);\n    }\n  }, [tools || botName]);\n\n  return null;\n};","import { useMemo } from 'react';\nimport { copilotInstances } from '../CopilotInstanceManager';\nimport { defaultBotName, type CopilotAPI } from '../../types/CopilotTypes';\nimport { registeredCopilotNames } from '../../components/CopilotProvider';\n\nexport const useCopilot = (idOrIndex: string | number = defaultBotName): CopilotAPI | undefined => {\n  return useMemo(() => {\n    let key: string;\n\n    if (typeof idOrIndex === 'number') {\n      key = registeredCopilotNames[idOrIndex];\n      if (!key) {\n        console.warn(`[useCopilot] No Copilot registered at index ${idOrIndex}`);\n        return undefined;\n      }\n    } else {\n      key = idOrIndex;\n    }\n\n    const copilot = copilotInstances.get(key);\n    if (!copilot) {\n      console.warn(`[useCopilot] Copilot instance \"${key}\" not found.`);\n      return undefined;\n    }\n    return copilot;\n  }, [idOrIndex]);\n};","import { defaultBotName } from \"../../types/CopilotTypes\";\nimport { useCopilot } from \"./useCopilot\";\n\nexport const useCopilotTools = (idOrIndex: string | number = defaultBotName) => {\n  const copilot = useCopilot(idOrIndex);\n  return copilot?.tools;\n};","import { defaultBotName } from \"../../types/CopilotTypes\";\nimport { useCopilot } from \"./useCopilot\";\n\nexport const useCopilotUser = (idOrIndex: string | number = defaultBotName) => {\n  const copilot = useCopilot(idOrIndex);\n  return copilot?.users;\n};"],"names":["_jsx","_Fragment"],"mappings":"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"}